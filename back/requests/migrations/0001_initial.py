# Generated by Django 5.2.5 on 2025-10-08 13:15

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('conductors', '0007_remove_conductor_photo_conductor_document'),
        ('vehicles', '0003_vehicle_updated_by'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DriverRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='Nome completo do condutor', max_length=150, verbose_name='Nome Completo')),
                ('cpf', models.CharField(db_index=True, help_text='CPF do condutor (somente números)', max_length=14, verbose_name='CPF')),
                ('email', models.EmailField(help_text='E-mail de contato do condutor', max_length=254, verbose_name='E-mail')),
                ('phone', models.CharField(help_text='Telefone de contato com DDD', max_length=20, verbose_name='Telefone')),
                ('cnh_number', models.CharField(help_text='Número de registro da Carteira Nacional de Habilitação', max_length=20, verbose_name='Número da CNH')),
                ('cnh_category', models.CharField(choices=[('A', 'Categoria A'), ('B', 'Categoria B'), ('AB', 'Categoria AB'), ('C', 'Categoria C'), ('D', 'Categoria D'), ('E', 'Categoria E')], help_text='Categoria da habilitação do condutor', max_length=2, verbose_name='Categoria da CNH')),
                ('message', models.TextField(blank=True, help_text='Mensagem ou observações adicionais do solicitante', null=True, verbose_name='Mensagem')),
                ('status', models.CharField(choices=[('em_analise', 'Em Análise'), ('aprovado', 'Aprovado'), ('reprovado', 'Reprovado')], db_index=True, default='em_analise', max_length=20, verbose_name='Status da Solicitação')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que a solicitação foi criada', verbose_name='Data de Criação')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Data e hora em que a solicitação foi aprovada ou reprovada', null=True, verbose_name='Data de Revisão')),
                ('rejection_reason', models.TextField(blank=True, help_text='Justificativa para reprovação da solicitação', null=True, verbose_name='Motivo da Reprovação')),
                ('conductor', models.OneToOneField(blank=True, help_text='Condutor criado a partir desta solicitação', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='driver_request', to='conductors.conductor', verbose_name='Condutor Criado')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Usuário que aprovou ou reprovou a solicitação', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='driver_requests_reviewed', to=settings.AUTH_USER_MODEL, verbose_name='Revisado por')),
            ],
            options={
                'verbose_name': 'Solicitação de Motorista',
                'verbose_name_plural': 'Solicitações de Motoristas',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='requests_dr_status_590406_idx'), models.Index(fields=['cpf', 'status'], name='requests_dr_cpf_ac849a_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('status', 'em_analise')), fields=('cpf',), name='unique_cpf_pending_driver')],
            },
        ),
        migrations.CreateModel(
            name='VehicleRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate', models.CharField(db_index=True, help_text='Placa do veículo (7 caracteres)', max_length=10, verbose_name='Placa')),
                ('brand', models.CharField(help_text='Marca do veículo (ex: Toyota, Volkswagen)', max_length=50, verbose_name='Marca')),
                ('model', models.CharField(help_text='Modelo do veículo (ex: Corolla, Gol)', max_length=100, verbose_name='Modelo')),
                ('year', models.IntegerField(help_text='Ano de fabricação do veículo', validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2026)], verbose_name='Ano')),
                ('color', models.CharField(help_text='Cor do veículo', max_length=30, verbose_name='Cor')),
                ('fuel_type', models.CharField(choices=[('gasoline', 'Gasolina'), ('ethanol', 'Etanol'), ('flex', 'Flex'), ('diesel', 'Diesel'), ('electric', 'Elétrico'), ('hybrid', 'Híbrido')], help_text='Tipo de combustível utilizado pelo veículo', max_length=20, verbose_name='Tipo de Combustível')),
                ('message', models.TextField(blank=True, help_text='Mensagem ou observações adicionais do solicitante', null=True, verbose_name='Mensagem')),
                ('status', models.CharField(choices=[('em_analise', 'Em Análise'), ('aprovado', 'Aprovado'), ('reprovado', 'Reprovado')], db_index=True, default='em_analise', max_length=20, verbose_name='Status da Solicitação')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que a solicitação foi criada', verbose_name='Data de Criação')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Data e hora em que a solicitação foi aprovada ou reprovada', null=True, verbose_name='Data de Revisão')),
                ('rejection_reason', models.TextField(blank=True, help_text='Justificativa para reprovação da solicitação', null=True, verbose_name='Motivo da Reprovação')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Usuário que aprovou ou reprovou a solicitação', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicle_requests_reviewed', to=settings.AUTH_USER_MODEL, verbose_name='Revisado por')),
                ('vehicle', models.OneToOneField(blank=True, help_text='Veículo criado a partir desta solicitação', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicle_request', to='vehicles.vehicle', verbose_name='Veículo Criado')),
            ],
            options={
                'verbose_name': 'Solicitação de Veículo',
                'verbose_name_plural': 'Solicitações de Veículos',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='requests_ve_status_ff2109_idx'), models.Index(fields=['plate', 'status'], name='requests_ve_plate_6084dc_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('status', 'em_analise')), fields=('plate',), name='unique_plate_pending_vehicle')],
            },
        ),
    ]

"use client";

import { useState, useCallback } from 'react';
import { Contract } from '@/lib/api/contratos';

export interface OptimisticContractsState {
  contracts: Contract[];
  totalCount: number;
  isLoading: boolean;
}

export function useOptimisticContracts() {
  const [state, setState] = useState<OptimisticContractsState>({
    contracts: [],
    totalCount: 0,
    isLoading: false
  });

  const setContracts = useCallback((contracts: Contract[]) => {
    setState(prev => ({ ...prev, contracts }));
  }, []);

  const setTotalCount = useCallback((totalCount: number) => {
    setState(prev => ({ ...prev, totalCount }));
  }, []);

  const setLoading = useCallback((isLoading: boolean) => {
    setState(prev => ({ ...prev, isLoading }));
  }, []);

  const addOptimisticContract = useCallback((contract: Partial<Contract> & { 
    budget_line?: any; 
    main_inspector?: any;
    substitute_inspector?: any;
  }) => {
    const optimisticContract: Contract = {
      id: Date.now(), // Temporary ID
      protocol_number: 'Aguardando...', // Will be auto-generated by backend
      budget_line: contract.budget_line || { id: contract.budget_line || 0, name: 'Carregando...' },
      main_inspector: contract.main_inspector || { id: contract.main_inspector || 0, full_name: 'Carregando...' },
      substitute_inspector: contract.substitute_inspector || { id: contract.substitute_inspector || 0, full_name: 'Carregando...' },
      payment_nature: contract.payment_nature || 'PAGAMENTO ÃšNICO',
      description: contract.description || '',
      original_value: contract.original_value || '0.00',
      current_value: contract.current_value || '0.00',
      start_date: contract.start_date || new Date().toISOString().split('T')[0],
      end_date: contract.end_date || undefined,
      signing_date: contract.signing_date || undefined,
      expiration_date: contract.expiration_date || undefined,
      status: contract.status || 'ATIVO',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      created_by: null,
      updated_by: null,
      isOptimistic: true
    };

    setState(prev => ({
      ...prev,
      contracts: [optimisticContract, ...prev.contracts],
      totalCount: prev.totalCount + 1
    }));

    return optimisticContract.id;
  }, []);

  const replaceOptimisticContract = useCallback((tempId: number, realContract: Contract) => {
    setState(prev => ({
      ...prev,
      contracts: prev.contracts.map(contract => 
        contract.id === tempId && contract.isOptimistic ? 
        { ...realContract, isOptimistic: false } : 
        contract
      )
    }));
  }, []);

  const removeOptimisticContract = useCallback((tempId: number) => {
    setState(prev => ({
      ...prev,
      contracts: prev.contracts.filter(contract => 
        !(contract.id === tempId && contract.isOptimistic)
      ),
      totalCount: prev.totalCount - 1
    }));
  }, []);

  const updateContract = useCallback((updatedContract: Contract) => {
    setState(prev => ({
      ...prev,
      contracts: prev.contracts.map(contract => 
        contract.id === updatedContract.id ? updatedContract : contract
      )
    }));
  }, []);

  return {
    contracts: state.contracts,
    totalCount: state.totalCount,
    isLoading: state.isLoading,
    setContracts,
    setTotalCount,
    setLoading,
    addOptimisticContract,
    replaceOptimisticContract,
    removeOptimisticContract,
    updateContract
  };
}